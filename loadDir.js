// Generated by CoffeeScript 1.6.2
(function() {
  var fs, loadDir, _;

  _ = require('underscore');

  fs = require('fs');

  module.exports = loadDir = function(options) {
    var args, as_object, binary, black_list, callback, compile, destination, extension, filenamesOnly, freshen, on_change, path, priority, recursive, relativePath, reprocess, requireFiles, white_list, _ref, _ref1, _xp;

    if (options == null) {
      options = {};
    }
    white_list = options.white_list, black_list = options.black_list, destination = options.destination, compile = options.compile, extension = options.extension, relativePath = options.relativePath, callback = options.callback, requireFiles = options.requireFiles, filenamesOnly = options.filenamesOnly, priority = options.priority, freshen = options.freshen, reprocess = options.reprocess, binary = options.binary;
    as_object = (_ref = options.as_object) != null ? _ref : false;
    recursive = (_ref1 = options.recursive) != null ? _ref1 : true;
    path = options.path;
    on_change = options.on_change;
    destination = options.destination;
    args = arguments[0];
    if (recursive == null) {
      recursive = true;
    }
    if (relativePath == null) {
      relativePath = '';
    }
    _xp = {};
    _.map(fs.readdirSync(path), function(fileName) {
      var addToObject, compiled, deepContents, er, fullPath, image_formats, process, readFile, recompile, trimmedFN, _changedFileName, _ref2, _writeDir,
        _this = this;

      if (white_list) {
        console.log({
          fileName: fileName
        });
        console.log(color('ASDF', 'red'));
      }
      if ((black_list != null) && _.include(black_list, fileName)) {
        return;
      }
      if ((white_list != null) && !_.include(white_list, fileName)) {
        return;
      }
      if (fileName.charAt(0) === '.') {
        return;
      }
      trimmedFN = fileName.trim_ext();
      fullPath = "" + path + "/" + fileName;
      if (fs.lstatSync(fullPath).isDirectory()) {
        if (recursive) {
          deepContents = loadDir(_.extend(_.clone(args), {
            path: fullPath,
            relativePath: (relativePath != null ? relativePath : '') + fileName + '/'
          }));
          if (as_object) {
            _xp[trimmedFN] = _.extend((_ref2 = _xp[trimmedFN]) != null ? _ref2 : {}, deepContents);
          } else {
            _xp = _.extend(deepContents, _xp);
          }
        }
        return;
      }
      if (on_change || freshen || reprocess) {
        _.defer(function() {
          return fs.watch(fullPath, function() {
            return _.delay(function() {
              if (on_change === 'restart') {
                loadDir.restartServer();
              }
              console.log('recompilin');
              if (reprocess) {
                console.log('refreshen');
                if (typeof readFile === "function") {
                  readFile();
                }
                if (typeof process === "function") {
                  process(true);
                }
              }
              if (freshen) {
                console.log('refreshen');
                if (typeof readFile === "function") {
                  readFile();
                }
                if (typeof recompile === "function") {
                  recompile();
                }
                return typeof addToObject === "function" ? addToObject() : void 0;
              }
            }, 250);
          });
        });
      }
      console.log('loadDir 120', fullPath, fileName);
      compiled = '';
      if (filenamesOnly) {
        return _xp[trimmedFN] = {};
      }
      image_formats = ['png', 'jpg', 'gif', 'jpeg'];
      if (extension == null) {
        extension = fullPath.extension();
      }
      if (binary == null) {
        binary = (_(image_formats)).include(fullPath.extension().toLowerCase()) ? 'binary' : void 0;
      }
      (readFile = function() {
        var contents, _ref3;

        contents = fs.readFileSync(fullPath, binary).toString();
        return compiled = (_ref3 = typeof compile === "function" ? compile(contents) : void 0) != null ? _ref3 : contents;
      })();
      if (_.isFunction(callback)) {
        (process = function(reloaded) {
          return compiled = callback(_.extend(_.clone(args), {
            compiled: compiled,
            relativePath: relativePath,
            fileName: fileName,
            fullPath: fullPath,
            reloaded: reloaded
          }));
        })(false);
      }
      if (requireFiles) {
        try {
          require(fullPath);
        } catch (_error) {
          er = _error;
          _.defer(function() {
            return require(fullPath);
          });
        }
      }
      _writeDir = destination + '/' + (relativePath != null ? relativePath : '');
      _changedFileName = _writeDir + trimmedFN + '.' + extension;
      if (destination != null) {
        try {
          fs.lstatSync(_writeDir);
        } catch (_error) {
          er = _error;
          fs.mkdirSync(_writeDir);
        }
        (recompile = function() {
          return fs.writeFileSync(_changedFileName, compiled, binary);
        })();
      }
      return (addToObject = function() {
        if (as_object != null) {
          return _xp[(relativePath != null ? relativePath : '') + fileName] = compiled;
        } else {
          return _xp[trimmedFN] = _.extend(compiled, _xp[trimmedFN]);
        }
      })();
    });
    return _xp;
  };

  loadDir.restartServer = function() {
    fs.writeFileSync('loadDir_tmp_restart.txt', Math.random());
    require('loadDir_tmp_restart.txt');
    return fs.writeFileSync('loadDir_tmp_restart.txt', Math.random());
  };

}).call(this);
